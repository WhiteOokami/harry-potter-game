{"version":3,"sources":["assets\\code\\movingPlatform.js"],"names":["cc","Class","Component","properties","movingPlayer","Node","rb","RigidBody","speed","startPos","distance","direction","players","spinning","sideToSide","dropping","spinSpeed","playersOnMe","maxPlayers","falling","rising","upDown","moveUpTime","v2","onLoad","node","getComponent","x","y","start","shake","scheduleOnce","onBeginContact","contact","self","other","group","isPlayer","onCollisionEnter","onEndContact","location","moveUpDown","update","dt","find","gameStarted","Math","abs","linearVelocity","angle","schedule"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        movingPlayer: cc.Node,\r\n        rb: cc.RigidBody,\r\n        speed: 500000,\r\n        startPos: 0,\r\n        distance: 1000,\r\n        direction: 1,\r\n        players: cc.Node,\r\n        spinning: false,\r\n        sideToSide: false,\r\n        dropping: false,\r\n        spinSpeed: 1,\r\n        playersOnMe: 0,\r\n        maxPlayers: 1,\r\n        falling: false,\r\n        rising: false,\r\n        upDown: false,\r\n        moveUpTime: 3,\r\n        startPos: cc.v2(),\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.rb = this.node.getComponent(cc.RigidBody);\r\n        this.startPos = this.node.x;\r\n        this.startPos = cc.v2(this.node.x, this.node.y);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    shake() {\r\n        this.falling = true;\r\n        this.scheduleOnce(function () {\r\n            this.falling = false;\r\n        }, 0.1);\r\n        this.scheduleOnce(function () {\r\n            this.rising = true;\r\n        }, 0.2)\r\n        this.scheduleOnce(function () {\r\n            this.rising = false;\r\n        }, 0.3)\r\n        //this.scheduleOnce(function () {\r\n        //    this.falling = true;\r\n        //}, 0.4);\r\n        //this.scheduleOnce(function () {\r\n        //    this.falling = false;\r\n        //}, 0.5);\r\n        //this.scheduleOnce(function () {\r\n        //    this.rising = true;\r\n        //}, 0.6)\r\n        //this.scheduleOnce(function () {\r\n        //    this.rising = false;\r\n        //}, 0.7)\r\n\r\n\r\n    },\r\n    onBeginContact(contact, self, other) {\r\n \r\n        if (other.node.group == \"player\") {\r\n            if (this.dropping && !this.falling && !this.rising)\r\n                this.shake();\r\n            this.playersOnMe += 1;\r\n            if (other.node.getComponent(\"movement\").isPlayer) {\r\n                this.movingPlayer = other.node;\r\n                //this.movingPlayer.parent = this.node;\r\n                //this.movingPlayer.setPosition(0, 0);\r\n            }\r\n        }\r\n\r\n        if (other.node.group == \"dangerous\" && this.dropping) {\r\n            this.node.x = this.startPos.x;\r\n            this.node.y = this.startPos.y;\r\n        }\r\n        \r\n    },\r\n    onCollisionEnter: function (other, self) {\r\n\r\n        if (other.node.group == \"dangerous\" && this.dropping) {\r\n            this.node.x = this.startPos.x;\r\n            this.node.y = this.startPos.y;\r\n            this.falling = false;\r\n            this.rising = false;\r\n        }\r\n\r\n    },\r\n    onEndContact(contact, self, other) {\r\n        let location = other.node.x - this.node.x;\r\n        if (other.node.group == \"player\")\r\n            this.playersOnMe -= 1;\r\n\r\n        if (other.node == this.movingPlayer) {\r\n   \r\n            this.movingPlayer = null;\r\n            //this.movingPlayer.parent = this.players;\r\n        }\r\n    },\r\n    moveUpDown() {\r\n        if (this.falling) {\r\n            this.falling = false;\r\n            this.rising = true;\r\n        } else if (this.rising) {\r\n            this.falling = true;\r\n            this.rising = false;\r\n        } else {\r\n            this.falling = true;\r\n        }\r\n    },\r\n    update(dt) {\r\n\r\n        if (cc.find(\"system\").getComponent(\"client\").gameStarted) {\r\n            if (this.sideToSide) {\r\n                if (Math.abs(this.startPos - this.node.x) >= this.distance)\r\n                    this.direction *= -1;\r\n                //move object\r\n\r\n                this.rb.linearVelocity = cc.v2(this.speed * dt * this.direction, 0);\r\n            }\r\n            else if (this.spinning) {\r\n                this.node.angle += dt * this.spinSpeed;\r\n            }\r\n            else if (this.dropping) {\r\n                if (this.playersOnMe > this.maxPlayers) {\r\n                    this.falling = true;\r\n                }\r\n            }\r\n\r\n            if (this.falling) {\r\n                this.node.y -= this.speed * dt;\r\n            }\r\n\r\n            if (this.rising) {\r\n                this.node.y += this.speed * dt;\r\n            }\r\n\r\n            if (this.upDown) {\r\n                this.schedule(this.moveUpDown, this.moveUpTime);\r\n                this.upDown = false;\r\n            }\r\n        }\r\n       \r\n        //stand on moving platform\r\n        //if (this.movingPlayer != null) {\r\n        //    let lv = this.movingPlayer.getComponent(cc.RigidBody).linearVelocity;\r\n        //    this.movingPlayer.getComponent(cc.RigidBody).applyForceToCenter(cc.v2(this.speed * dt * this.direction, 0));\r\n        //    console.log(lv.x);\r\n        //}\r\n            \r\n    },\r\n});\r\n"]}