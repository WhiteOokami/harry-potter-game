{"version":3,"sources":["assets\\code\\enemyScript.js"],"names":["cc","Class","Component","properties","chasingPlayer","Node","speed","player","walkSpeed","jumpHeight","checking","deltaTime","grounded","alertNode","patrolling","animation","Animation","canAttack","attackCooldown","attackRange","canMove","moving","playingIdle","chasePlayer","active","find","getComponent","sendEnemyState","node","name","jump","RigidBody","linearVelocity","Vec2","x","attack","play","scheduleOnce","moveRight","animState","wrapMode","WrapMode","Loop","scaleX","Math","abs","y","moveLeft","onCollisionEnter","other","self","group","getParent","onCollisionExit","onBeginContact","contact","tag","start","update","dt","stop","playerId","direction","sqrt","distance","distance2"],"mappings":"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","sourceRoot":"/","sourcesContent":["\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chasingPlayer: cc.Node,\r\n        speed: 100,\r\n        player: cc.Node,\r\n        walkSpeed: 50,\r\n        jumpHeight: 100,\r\n        checking: false,\r\n        deltaTime: 0,\r\n        grounded: false,\r\n        alertNode: cc.Node,\r\n        patrolling: false,\r\n        animation: cc.Animation,\r\n        canAttack: true,\r\n        attackCooldown: 2,\r\n        attackRange: 5,\r\n        canMove: true,\r\n        moving: false,\r\n        playingIdle: true,\r\n    },\r\n\r\n    chasePlayer(player) {\r\n        this.chasingPlayer = player;\r\n        if (player == this.player) {\r\n            this.alertNode.active = true;\r\n            \r\n            cc.find(\"system\").getComponent(\"client\").sendEnemyState(\"chaseNew\", [null,null], this.node.name);\r\n        } else {\r\n            this.alertNode.active = false;\r\n        }\r\n    },\r\n    jump() {\r\n        if (this.chasingPlayer == this.player) {\r\n            cc.find(\"system\").getComponent(\"client\").sendEnemyState(\"jump\", [null, null], this.node.name);\r\n            this.getComponent(cc.RigidBody).linearVelocity = cc.Vec2(this.getComponent(cc.RigidBody).linearVelocity.x, this.jumpHeight);\r\n        }\r\n            \r\n    },\r\n    attack() {\r\n        this.canAttack = false;\r\n        this.animation.play(\"cardGuyAttack\");\r\n        this.scheduleOnce(function () { this.canAttack = true; }, this.attackCooldown);\r\n    },\r\n    moveRight() {\r\n        //play animation only once\r\n        if (!this.moving) {\r\n            let animState = this.animation.play(\"cardGuyWalk\");\r\n            animState.wrapMode = cc.WrapMode.Loop;\r\n            this.moving = true;\r\n            this.playingIdle = false;\r\n        }\r\n        \r\n        this.node.scaleX = -Math.abs(this.node.scaleX);\r\n        if (this.chasingPlayer == this.player) {\r\n            cc.find(\"system\").getComponent(\"client\").sendEnemyState(\"right\", [null, null], this.node.name);\r\n            this.getComponent(cc.RigidBody).linearVelocity = cc.Vec2(this.speed * this.deltaTime, this.getComponent(cc.RigidBody).linearVelocity.y);\r\n        }\r\n    },\r\n    moveLeft() {\r\n        if (!this.moving) {\r\n            let animState = this.animation.play(\"cardGuyWalk\");\r\n            animState.wrapMode = cc.WrapMode.Loop;\r\n            this.moving = true;\r\n            this.playingIdle = false;\r\n        }\r\n        \r\n        this.node.scaleX = Math.abs(this.node.scaleX);\r\n        if (this.chasingPlayer == this.player) {\r\n            cc.find(\"system\").getComponent(\"client\").sendEnemyState(\"left\", [null, null], this.node.name);\r\n            this.getComponent(cc.RigidBody).linearVelocity = cc.Vec2(-this.speed * this.deltaTime, this.getComponent(cc.RigidBody).linearVelocity.y);\r\n        }\r\n\r\n    },\r\n    onCollisionEnter: function (other, self) {\r\n        //console.log(other.node.name);\r\n        if (other.node.group == \"playerHitbox\") {\r\n            //if not chasing this player, chase him\r\n            if (other.node.getParent().getParent() == this.player) {\r\n                if (this.chasingPlayer != null) {\r\n                    this.checking = true;  \r\n                }\r\n                else {\r\n                    this.chasePlayer(this.player);\r\n                }\r\n                \r\n            }   \r\n        }\r\n    },\r\n\r\n\r\n    onCollisionExit: function (other, self) {\r\n        if (other.node.getParent().getParent() == this.chasingPlayer) {\r\n            this.chasingPlayer = null;\r\n\r\n            this.getComponent(cc.RigidBody).linearVelocity = cc.Vec2(0, 0);\r\n            this.alertNode.active = false;\r\n        }\r\n        if (other.node.getParent().getParent() == this.player) {\r\n            this.checking = false;\r\n        }\r\n    },\r\n\r\n\r\n    onBeginContact(contact, self, other) {\r\n        if (self.tag == 2) {\r\n            this.grounded = true;\r\n        }\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n    },\r\n\r\n    update(dt) {\r\n        this.deltaTime = dt;\r\n        \r\n        \r\n        if (this.canMove) {\r\n            //play idle animation not moving\r\n            if (this.getComponent(cc.RigidBody).linearVelocity.x == 0 && !this.playingIdle) {\r\n                this.animation.stop(\"cardGuyWalk\");\r\n                this.animation.play(\"idle\");\r\n                this.moving = false;\r\n                this.playingIdle = true;\r\n            }\r\n\r\n            if (this.player == null) {\r\n                if (cc.find(\"system\").getComponent(\"client\").playerId == 0) {\r\n                    //do nothing\r\n                } else {\r\n                    this.player = cc.find(\"Canvas/Players/\" + cc.find(\"system\").getComponent(\"client\").playerId);\r\n                }\r\n            }\r\n            else {\r\n                if (this.chasingPlayer == this.player) {\r\n                    cc.find(\"system\").getComponent(\"client\").sendEnemyState(\"position\", [this.node.x, this.node.y], this.node.name);\r\n\r\n                    let direction = (this.player.x - this.node.x) / Math.abs(this.player.x - this.node.x);\r\n                    if (direction > 0)\r\n                        this.moveRight();\r\n                    else\r\n                        this.moveLeft();\r\n\r\n                    if (Math.sqrt((this.player.x - this.node.x) ** 2 + (this.player.y - this.node.y) ** 2) < this.attackRange) {\r\n                        if (this.canAttack) {\r\n                            this.attack();\r\n                        }\r\n                    }\r\n                    //jump if if player is above\r\n                    //if (this.player.y > (this.node.y + 100)) {\r\n                    //    if (this.grounded)\r\n                    //        this.jump();\r\n                    //}\r\n\r\n                }\r\n                else if (this.checking && this.chasingPlayer != null) {\r\n                    let distance = Math.abs(this.node.x - this.player.x);\r\n                    let distance2 = Math.abs(this.node.x - this.chasingPlayer.x);\r\n                    if (this.player != this.chasingPlayer && distance < distance2)\r\n                        this.chasePlayer(this.player);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (this.canAttack) {\r\n                this.attack();\r\n            }\r\n        }\r\n\r\n        \r\n    },\r\n});\r\n"]}